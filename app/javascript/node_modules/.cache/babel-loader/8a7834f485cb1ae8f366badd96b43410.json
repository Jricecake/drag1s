{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js\";\nimport React, { useState } from \"react\";\n\nconst Roll = props => {\n  const [rollAmount, setRollAmount] = useState([]);\n  const {\n    amount,\n    sides,\n    modifier\n  } = props;\n\n  const rollCalc = sides => {\n    return 1 + Math.floor(Math.random() * sides);\n  };\n\n  const addModifier = (roll, modifier) => {\n    return roll + modifier;\n  };\n\n  const determineDisplay = () => {\n    const rolls = [];\n\n    for (let i = 0; i < amount; i++) {\n      rolls.push(rollCalc(sides));\n    }\n\n    setRollAmount(rolls); // // If a modifier is applied, show the math involved\n    // if (props.modifier !== null) {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll} + {parseInt(props.modifier)} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // else if no modifier, just display dice roll\n    // } else {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    // }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }\n  }, determineDisplay());\n};\n\nexport default Roll; // if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           }\n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }","map":{"version":3,"sources":["/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js"],"names":["React","useState","Roll","props","rollAmount","setRollAmount","amount","sides","modifier","rollCalc","Math","floor","random","addModifier","roll","determineDisplay","rolls","i","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA8BL,KAApC;;AAEA,QAAMM,QAAQ,GAAIF,KAAD,IAAW;AAC1B,WAAO,IAAIG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,KAA3B,CAAX;AACD,GAFD;;AAIA,QAAMM,WAAW,GAAG,CAACC,IAAD,EAAON,QAAP,KAAoB;AACtC,WAAOM,IAAI,GAAGN,QAAd;AACD,GAFD;;AAIA,QAAMO,gBAAgB,GAAG,MAAM;AAC7B,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,MAApB,EAA4BW,CAAC,EAA7B,EAAiC;AAC/BD,MAAAA,KAAK,CAACE,IAAN,CAAWT,QAAQ,CAACF,KAAD,CAAnB;AACD;;AACDF,IAAAA,aAAa,CAACW,KAAD,CAAb,CAL6B,CAM7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA/DD;;AAiEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,gBAAgB,EAAtB,CAAP;AACD,CA/ED;;AAiFA,eAAeb,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\n\nconst Roll = (props) => {\n  const [rollAmount, setRollAmount] = useState([]);\n\n  const { amount, sides, modifier } = props;\n\n  const rollCalc = (sides) => {\n    return 1 + Math.floor(Math.random() * sides);\n  };\n\n  const addModifier = (roll, modifier) => {\n    return roll + modifier;\n  };\n\n  const determineDisplay = () => {\n    const rolls = []\n    for (let i = 0; i < amount; i++) {\n      rolls.push(rollCalc(sides))\n    }\n    setRollAmount(rolls)\n    // // If a modifier is applied, show the math involved\n    // if (props.modifier !== null) {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll} + {parseInt(props.modifier)} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n\n    //   // else if no modifier, just display dice roll\n    // } else {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    // }\n  };\n\n  return <div>{determineDisplay()}</div>;\n};\n\nexport default Roll;\n\n// if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           }\n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }\n"]},"metadata":{},"sourceType":"module"}