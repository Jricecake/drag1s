{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js\";\nimport React from 'react';\n\nconst Roll = props => {\n  const determineDisplay = () => {\n    // If a modifier is applied, show the math involved\n    if (props.modifier !== null) {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 14\n          }\n        }, \"(1d\", props.sides, \") - \", props.roll, \" + \", parseInt(props.modifier), \" = \", props.roll + parseInt(props.modifier));\n      } // crit hits are green\n\n\n      if (props.roll === 20 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            color: 'green'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 16\n          }\n        }, \"(1d\", props.sides, \") - \", props.roll, \" + \", props.modifier, \" = \", props.roll + parseInt(props.modifier));\n      } // regular rolls are white\n      else {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 16\n            }\n          }, \"(1d\", props.sides, \") - \", props.roll, \" + \", props.modifier, \" = \", props.roll + parseInt(props.modifier));\n        } // else if no modifier, just display dice roll\n\n    } else {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 14\n          }\n        }, \"(1d\", props.sides, \") - \", props.roll);\n      } // crit hits are green\n\n\n      if (props.roll === 20 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            color: 'green'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 18\n          }\n        }, \"(1d\", props.sides, \") - \", props.roll);\n      } // regular rolls are white\n      else {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 18\n            }\n          }, \"(1d\", props.sides, \") - \", props.roll);\n        }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, determineDisplay());\n};\n\nexport default Roll; // if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         } \n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           } \n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }","map":{"version":3,"sources":["/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js"],"names":["React","Roll","props","determineDisplay","modifier","roll","sides","color","parseInt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAEtB,QAAMC,gBAAgB,GAAG,MAAM;AAC7B;AACA,QAAID,KAAK,CAACE,QAAN,KAAmB,IAAvB,EAA4B;AAE1B;AACA,UAAIF,KAAK,CAACG,IAAN,KAAe,CAAf,IAAoBH,KAAK,CAACI,KAAN,KAAgB,EAAxC,EAA2C;AAC3C,4BAAO;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAC;AAAP,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA+BL,KAAK,CAACI,KAArC,UAAgDJ,KAAK,CAACG,IAAtD,SAA+DG,QAAQ,CAACN,KAAK,CAACE,QAAP,CAAvE,SAA6FF,KAAK,CAACG,IAAN,GAAaG,QAAQ,CAACN,KAAK,CAACE,QAAP,CAAlH,CAAP;AACC,OALyB,CAM1B;;;AACA,UAAIF,KAAK,CAACG,IAAN,KAAe,EAAf,IAAqBH,KAAK,CAACI,KAAN,KAAgB,EAAzC,EAA4C;AAC1C,4BAAO;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAC;AAAP,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiCL,KAAK,CAACI,KAAvC,UAAkDJ,KAAK,CAACG,IAAxD,SAAiEH,KAAK,CAACE,QAAvE,SAAqFF,KAAK,CAACG,IAAN,GAAaG,QAAQ,CAACN,KAAK,CAACE,QAAP,CAA1G,CAAP;AACD,OAFD,CAGA;AAHA,WAIK;AACH,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAASF,KAAK,CAACI,KAAf,UAA0BJ,KAAK,CAACG,IAAhC,SAAyCH,KAAK,CAACE,QAA/C,SAA6DF,KAAK,CAACG,IAAN,GAAaG,QAAQ,CAACN,KAAK,CAACE,QAAP,CAAlF,CAAP;AACD,SAbyB,CAe1B;;AACD,KAhBD,MAgBO;AACL;AACA,UAAIF,KAAK,CAACG,IAAN,KAAe,CAAf,IAAoBH,KAAK,CAACI,KAAN,KAAgB,EAAxC,EAA2C;AAC3C,4BAAO;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAC;AAAP,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA+BL,KAAK,CAACI,KAArC,UAAgDJ,KAAK,CAACG,IAAtD,CAAP;AACG,OAJE,CAKH;;;AACA,UAAIH,KAAK,CAACG,IAAN,KAAe,EAAf,IAAqBH,KAAK,CAACI,KAAN,KAAgB,EAAzC,EAA4C;AAC1C,4BAAO;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAC;AAAP,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiCL,KAAK,CAACI,KAAvC,UAAkDJ,KAAK,CAACG,IAAxD,CAAP;AACD,OAFD,CAGA;AAHA,WAIK;AACH,8BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAASH,KAAK,CAACI,KAAf,UAA0BJ,KAAK,CAACG,IAAhC,CAAP;AACD;AACJ;AACF,GAhCD;;AAmCA,sBACE,0CACGF,gBAAgB,EADnB,CADF;AAKD,CA1CD;;AA4CA,eAAeF,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\n\nconst Roll = (props) => {\n\n  const determineDisplay = () => {\n    // If a modifier is applied, show the math involved\n    if (props.modifier !== null){\n\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20){\n      return <div style={{color:'red'}}>(1d{props.sides}) - {props.roll} + {parseInt(props.modifier)} = {(props.roll + parseInt(props.modifier))}</div>\n      }\n      // crit hits are green\n      if (props.roll === 20 && props.sides === 20){\n        return <div style={{color:'green'}}>(1d{props.sides}) - {props.roll} + {props.modifier} = {(props.roll + parseInt(props.modifier))}</div>\n      } \n      // regular rolls are white\n      else {\n        return <div>(1d{props.sides}) - {props.roll} + {props.modifier} = {(props.roll + parseInt(props.modifier))}</div>\n      }\n\n      // else if no modifier, just display dice roll\n    } else {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20){\n      return <div style={{color:'red'}}>(1d{props.sides}) - {props.roll}</div>\n        }\n        // crit hits are green\n        if (props.roll === 20 && props.sides === 20){\n          return <div style={{color:'green'}}>(1d{props.sides}) - {props.roll}</div>\n        } \n        // regular rolls are white\n        else {\n          return <div>(1d{props.sides}) - {props.roll}</div>\n        }\n    }\n  }\n  \n\n  return (\n    <>\n      {determineDisplay()}\n    </>\n  );\n}\n\nexport default Roll;\n\n// if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         } \n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           } \n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }"]},"metadata":{},"sourceType":"module"}