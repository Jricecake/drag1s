{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js\";\nimport React, { useState } from \"react\";\n\nconst Roll = props => {\n  const [rollAmount, setRollAmount] = useState([]);\n  const {\n    amount,\n    sides,\n    modifier\n  } = props;\n\n  const rollCalc = sides => {\n    return 1 + Math.floor(Math.random() * sides);\n  };\n\n  const addModifier = (roll, modifier) => {\n    return roll + modifier;\n  };\n\n  const determineDisplay = () => {\n    for (let i = 0; i < amount; i++) {\n      setRollAmount([...rollAmount, rollCalc(sides)]);\n    } // If a modifier is applied, show the math involved\n\n\n    if (props.modifier !== null) {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 11\n          }\n        }, \"(1d\", props.sides, \"): \", props.roll, \" + \", parseInt(props.modifier), \" =\", \" \", props.roll + parseInt(props.modifier));\n      } // crit hits are green\n\n\n      if (props.roll === 20 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          style: {\n            color: \"green\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }\n        }, \"(1d\", props.sides, \"): \", props.roll, \" + \", props.modifier, \" =\", \" \", props.roll + parseInt(props.modifier));\n      } // regular rolls are white\n      else {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 11\n            }\n          }, \"(1d\", props.sides, \"): \", props.roll, \" + \", props.modifier, \" =\", \" \", props.roll + parseInt(props.modifier));\n        } // else if no modifier, just display dice roll\n\n    } else {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }, \"(1d\", props.sides, \"): \", props.roll);\n      } // crit hits are green\n\n\n      if (props.roll === 20 && props.sides === 20) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          style: {\n            color: \"green\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }\n        }, \"(1d\", props.sides, \"): \", props.roll);\n      } // regular rolls are white\n      else {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 11\n            }\n          }, \"(1d\", props.sides, \"): \", props.roll);\n        }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, determineDisplay());\n};\n\nexport default Roll; // if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           }\n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }","map":{"version":3,"sources":["/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js"],"names":["React","useState","Roll","props","rollAmount","setRollAmount","amount","sides","modifier","rollCalc","Math","floor","random","addModifier","roll","determineDisplay","i","color","parseInt"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst Roll = (props) => {\n  const [rollAmount, setRollAmount] = useState([]);\n\n  const { amount, sides, modifier } = props;\n\n  const rollCalc = (sides) => {\n    return 1 + Math.floor(Math.random() * sides);\n  };\n\n  const addModifier = (roll, modifier) => {\n    return roll + modifier;\n  };\n\n  const determineDisplay = () => {\n    for (let i = 0; i < amount; i++) {\n      setRollAmount([...rollAmount, rollCalc(sides)]);\n    }\n    // If a modifier is applied, show the math involved\n    if (props.modifier !== null) {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20) {\n        return (\n          <li style={{ color: \"red\" }}>\n            (1d{props.sides}): {props.roll} + {parseInt(props.modifier)} ={\" \"}\n            {props.roll + parseInt(props.modifier)}\n          </li>\n        );\n      }\n      // crit hits are green\n      if (props.roll === 20 && props.sides === 20) {\n        return (\n          <li style={{ color: \"green\" }}>\n            (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n            {props.roll + parseInt(props.modifier)}\n          </li>\n        );\n      }\n      // regular rolls are white\n      else {\n        return (\n          <li>\n            (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n            {props.roll + parseInt(props.modifier)}\n          </li>\n        );\n      }\n\n      // else if no modifier, just display dice roll\n    } else {\n      // crit fails are red\n      if (props.roll === 1 && props.sides === 20) {\n        return (\n          <li style={{ color: \"red\" }}>\n            (1d{props.sides}): {props.roll}\n          </li>\n        );\n      }\n      // crit hits are green\n      if (props.roll === 20 && props.sides === 20) {\n        return (\n          <li style={{ color: \"green\" }}>\n            (1d{props.sides}): {props.roll}\n          </li>\n        );\n      }\n      // regular rolls are white\n      else {\n        return (\n          <li>\n            (1d{props.sides}): {props.roll}\n          </li>\n        );\n      }\n    }\n  };\n\n  return <>{determineDisplay()}</>;\n};\n\nexport default Roll;\n\n// if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           }\n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }\n"]},"metadata":{},"sourceType":"module"}