{"ast":null,"code":"var _jsxFileName = \"/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js\";\nimport React, { useState } from \"react\";\n\nconst Roll = props => {\n  const {\n    amount,\n    sides,\n    modifier,\n    rolls\n  } = props;\n\n  const addModifier = (roll, modifier) => {\n    return roll + modifier;\n  };\n\n  const determineDisplay = () => {\n    // const rolls = [];\n    let stringBlock = amount + \"d\" + sides + \": \";\n    const total = rolls.reduce((a, b) => a + b);\n    {\n      if (rolls.length > 1) {\n        for (let i = 0; i < rolls.length; i++) {\n          rolls[i];\n          i == rolls.length - 1 ? stringBlock += rolls[i] : stringBlock += rolls[i] + \" + \";\n        }\n      } else {\n        stringBlock += rolls[0];\n      }\n    } // for (let i = 0; i < amount; i++) {\n    //   rolls.push(rollCalc(sides));\n    //   i == amount - 1\n    //     ? (stringBlock += rolls[i])\n    //     : (stringBlock += rolls[i] + \" + \");\n    // }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, rolls.length > 1 ? stringBlock = total : stringBlock); // result :\n    // <div> 4d20: (roll[0])12 + (roll[1])18 + (roll[2])20 + (roll[3]) = 54 </div>\n    // console.log(rolls);\n    // console.log(stringBlock);\n    // setRollAmount(rolls)\n    // // If a modifier is applied, show the math involved\n    // if (props.modifier !== null) {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll} + {parseInt(props.modifier)} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // else if no modifier, just display dice roll\n    // } else {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    // }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 10\n    }\n  }, determineDisplay());\n};\n\nexport default Roll; // if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           }\n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }","map":{"version":3,"sources":["/Users/Jonny/Development/Personal/dandd-app/app/javascript/src/components/Roll.js"],"names":["React","useState","Roll","props","amount","sides","modifier","rolls","addModifier","roll","determineDisplay","stringBlock","total","reduce","a","b","length","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA;AAA3B,MAAqCJ,KAA3C;;AAEA,QAAMK,WAAW,GAAG,CAACC,IAAD,EAAOH,QAAP,KAAoB;AACtC,WAAOG,IAAI,GAAGH,QAAd;AACD,GAFD;;AAIA,QAAMI,gBAAgB,GAAG,MAAM;AAC7B;AACA,QAAIC,WAAW,GAAGP,MAAM,GAAG,GAAT,GAAeC,KAAf,GAAuB,IAAzC;AACA,UAAMO,KAAK,GAAGL,KAAK,CAACM,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA3B,CAAd;AACA;AACE,UAAIR,KAAK,CAACS,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACS,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrCV,UAAAA,KAAK,CAACU,CAAD,CAAL;AACAA,UAAAA,CAAC,IAAIV,KAAK,CAACS,MAAN,GAAe,CAApB,GACKL,WAAW,IAAIJ,KAAK,CAACU,CAAD,CADzB,GAEKN,WAAW,IAAIJ,KAAK,CAACU,CAAD,CAAL,GAAW,KAF/B;AAGD;AACF,OAPD,MAOO;AACLN,QAAAA,WAAW,IAAIJ,KAAK,CAAC,CAAD,CAApB;AACD;AACF,KAf4B,CAgB7B;AACA;AACA;AACA;AACA;AACA;;AACA,wBAAO,0CAAGA,KAAK,CAACS,MAAN,GAAe,CAAf,GAAmBL,WAAW,GAAGC,KAAjC,GAAyCD,WAA5C,CAAP,CAtB6B,CAuB7B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAtFD;;AAwFA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,gBAAgB,EAAtB,CAAP;AACD,CAhGD;;AAkGA,eAAeR,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\n\nconst Roll = (props) => {\n  const { amount, sides, modifier, rolls } = props;\n\n  const addModifier = (roll, modifier) => {\n    return roll + modifier;\n  };\n\n  const determineDisplay = () => {\n    // const rolls = [];\n    let stringBlock = amount + \"d\" + sides + \": \";\n    const total = rolls.reduce((a, b) => a + b);\n    {\n      if (rolls.length > 1) {\n        for (let i = 0; i < rolls.length; i++) {\n          rolls[i]\n          i == rolls.length - 1\n            ? (stringBlock += rolls[i])\n            : (stringBlock += rolls[i] + \" + \");\n        }\n      } else {\n        stringBlock += rolls[0];\n      }\n    }\n    // for (let i = 0; i < amount; i++) {\n    //   rolls.push(rollCalc(sides));\n    //   i == amount - 1\n    //     ? (stringBlock += rolls[i])\n    //     : (stringBlock += rolls[i] + \" + \");\n    // }\n    return <>{rolls.length > 1 ? stringBlock = total : stringBlock}</>;\n    // result :\n    // <div> 4d20: (roll[0])12 + (roll[1])18 + (roll[2])20 + (roll[3]) = 54 </div>\n\n    // console.log(rolls);\n    // console.log(stringBlock);\n    // setRollAmount(rolls)\n    // // If a modifier is applied, show the math involved\n    // if (props.modifier !== null) {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll} + {parseInt(props.modifier)} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll} + {props.modifier} ={\" \"}\n    //         {props.roll + parseInt(props.modifier)}\n    //       </li>\n    //     );\n    //   }\n\n    //   // else if no modifier, just display dice roll\n    // } else {\n    //   // crit fails are red\n    //   if (props.roll === 1 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"red\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // crit hits are green\n    //   if (props.roll === 20 && props.sides === 20) {\n    //     return (\n    //       <li style={{ color: \"green\" }}>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    //   // regular rolls are white\n    //   else {\n    //     return (\n    //       <li>\n    //         (1d{props.sides}): {props.roll}\n    //       </li>\n    //     );\n    //   }\n    // }\n  };\n\n  return <div>{determineDisplay()}</div>;\n};\n\nexport default Roll;\n\n// if (roll.modifier !== null){\n//         if (roll.roll === 1){\n//         return <p style={{color:'red'}}>{roll} + {parseInt(roll.modifier)} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         if (roll.roll === 20){\n//           return <p style={{color:'green'}}>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//         else {\n//           return <p>{roll.roll} + {roll.modifier} = {(roll.roll + roll.modifier)}</p>\n//         }\n//       } else {\n//         if (roll.roll === 1){\n//           return <p style={{color:'red'}}>{roll}</p>\n//           }\n//           if (roll.roll === 20){\n//             return <p style={{color:'green'}}>{roll.roll}</p>\n//           }\n//           else {\n//             return <p>{roll.roll}</p>\n//           }\n//       }\n"]},"metadata":{},"sourceType":"module"}